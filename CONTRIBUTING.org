* To contribute to the project, you need to do it through merge request

  First you need to fork the repository into your own account. You can
  do that simply by clicking the fork button on the gitlab interface.

  https://gitlab.inria.fr/solverstack/chameleon/forks/new

  Then, clone the repository on your laptop:
  #+begin_src sh
  git clone git@gitlab.inria.fr:username/forkname.git
  #+end_src

  Once this is done, you can setup the chameleon repository as the
  upstream of your clone to simplify the update of your fork
  repository.
  #+begin_src sh
  git remote add upstream git@gitlab.inria.fr:solverstack/chameleon.git
  #+end_src

  To update your fork with the upstream chameleon's state:
  #+begin_src sh
  git pull upstream master
  git push -u origin master
  #+end_src

  Now, you have your repository configured, and you want to create a
  new pull request. The first step is to create a branch from the HEAD
  of the your fork repository.

  #+begin_src sh
  git branch your_branch_name
  git checkout your_branch_name
  #+end_src

  Apply your modifications in your branch. Then, you need to push this
  branch on your online repository
  #+begin_src sh
  git push -f origin your_branch_name
  #+end_src
  or without -f, if the branch already exists online, and you just
  want to update it.

  Once your branch is online, on the gitlab interface, go to the
  branches webpage, select the branch you want to push as a merge
  request, and push the button !!!

  *Be careful to check the 'close after merge' check box, and to push
  to the solverstack/chameleon repository*. By default the checkbox
  may not be checked, and the default repository is your fork.

  If the pull request is made to fix an issue, please name the branch
  "issueXX" so it is automatically linked to the issue. In addition,
  please add "fix issue #xx" in the comment of the pull request to
  automatically close the issue when the PR is merged.

** Rebase on top of 'master'

   In some cases your "feature" branch you want to merge into "master"
   has a long life span so that your branch and the master branch
   could make some conflicts. To avoid having to handle the possible
   conflicts at *merge request* time, please rebase your "feature" on
   top of "master" before pushing the button *merge request*.

   To do that, just go at the HEAD of your "feature" branch and rebase
   #+begin_src sh
   git checkout feature
   git rebase master
   #+end_src

   Then force to push on your origin
   #+begin_src sh
   git push --force origin feature
   #+end_src

   Then push the button *merge request*.

* To review locally a private pull request submitted by someone else

   Get the patch from the pull request (Need to update that !!!!
   Coming from bitbucket)
   #+begin_src sh
   curl https://bitbucket.org/api/2.0/repositories/icldistcomp/parsec/pullrequests/#PR/patch > pr#PR.patch
   #+end_src

   Then apply the patch on your local copy
   #+begin_src sh
   git apply pr#PR.patch
   #+end_src
